/*!
	Zoom v1.7.12 - 2014-02-12
	Enlarge images on click or mouseover.
	(c) 2014 Jack Moore - http://www.jacklmoore.com/zoom
	license: http://www.opensource.org/licenses/mit-license.php
	github: 
*/
(function ($) {
	var defaults = {
		url: false,
		callback: false,
		target: false,
		duration: 120,
		on: 'mouseover', // other options: grab, click, toggle
		touch: false, // enables a touch fallback
		onZoomIn: false,
		onZoomOut: false,
		magnify: 1,
		tolerance: 0
	};

	// Core Zoom Logic, independent of event listeners.
	$.zoom = function (target, source, img, magnify, tolerance) {
	    var targetHeight,
			targetWidth,
			sourceHeight,
			sourceWidth,
			xRatio,
			yRatio,
			offset,
			position = $(target).css('position');

		// The parent element needs positioning so that the zoomed element can be correctly positioned within.
		$(target).css({
			position: /(absolute|fixed)/.test(position) ? position : 'relative',
			'overflow': 'hidden'
		});

		img.style.width = img.style.height = '';

		$(img)
			.addClass('zoomImg')
			.css({
				position: 'absolute',
				top: 0,
				left: 0,
				opacity: 0,
				width: img.width * magnify,
				height: img.height * magnify,
				border: 'none',
				maxWidth: 'none',
				maxHeight: 'none'
			})
			.appendTo(target);

		return {
			init: function() {
				targetWidth = $(target).outerWidth();
				targetHeight = $(target).outerHeight();

				if (source === target) {
					sourceWidth = targetWidth;
					sourceHeight = targetHeight;
				} else {
					sourceWidth = $(source).outerWidth();
					sourceHeight = $(source).outerHeight();

					// the magnifier height and width are set here, based on the source image
					var w = ($(window).width() > $(window).height()) ? .4 : .66;
					targetWidth = Math.min(img.width * magnify, $(window).width()*w);
					targetHeight = Math.min(img.height * magnify, $(window).height()*.66);
					$(target).width(targetWidth);
					$(target).height(targetHeight);
				}

				// x/y tolerance is the space between the edge and the pointer
				// tolerance = Math.min(Math.min(targetWidth, targetHeight)*.1, targetWidth);
				// xTolerance = Math.min(targetWidth/2, sourceWidth*.1);
				// yTolerance = Math.max(targetHeight/2, sourceHeight*.1);
				xTolerance = (targetWidth < sourceWidth) ? targetWidth*.5 : sourceWidth*.15;
				yTolerance = (targetHeight < sourceHeight) ? targetHeight*.5 : sourceHeight*.15;
				// console.log(targetHeight + " " + sourceHeight);

				// x/y ratio is a mystery
				xRatio = (img.width - targetWidth) / (sourceWidth - 2 * xTolerance);
				yRatio = (img.height - targetHeight) / (sourceHeight - 2 * yTolerance);

				offset = $(source).offset();

			},
			move: function (e) {
				var left = (e.pageX - offset.left),
					top = (e.pageY - offset.top);

				var Tleft = (e.pageX - targetWidth/2),
					Ttop = (e.pageY - targetHeight/2);
				//was trying to find a way for the magnifier to shift as you got closer to edges
				// var Tleft = Math.max(e.pageX - targetWidth/2/xRatio, e.pageX - targetWidth/2),
				// 	Ttop = Math.max(e.pageY -  targetWidth/2/yRatio, e.pageY - targetHeight/2);
				// console.log("Tleft " +Tleft + " Ttop " + Ttop + " thing1 " + (e.pageX- targetWidth/2) + " thing2 " + (e.pageY- targetHeight/2 ));


				$(target).offset({ top: Ttop, left: Tleft, duration: 0 });
				// $(target).offset({ top: e.pageY, left: e.pageX });

				left = Math.max(Math.min(left, sourceWidth - xTolerance), 0);
				top = Math.max(Math.min(top, sourceHeight - yTolerance), 0);

				xRatio = (img.width - targetWidth) / (sourceWidth - 2 * xTolerance);
				yRatio = (img.height - targetHeight) / (sourceHeight - 2 * yTolerance);

				img.style.left = -Math.max((left - xTolerance) * xRatio, 0) + 'px';
				img.style.top = -Math.max((top - yTolerance) * yRatio, 0) + 'px';

				// img.style.left = -Math.max((left - tolerance), 0) + 'px';
				// img.style.top = -Math.max((top - tolerance), 0) + 'px';


			}
		};
	};

	$.fn.zoom = function (options) {
		return this.each(function () {
			var
			settings = $.extend({}, defaults, options || {}),
			//target will display the zoomed image
			target = settings.target || this,
			//source will provide zoom location info (thumbnail)
			source = this,
			img = document.createElement('img'),
			$img = $(img),
			mousemove = 'mousemove.zoom',
			clicked = false,
			touched = false,
			$urlElement;

			// If a url wasn't specified, look for an image element.
			if (!settings.url) {
				$urlElement = $(source).find('img');
				if ($urlElement[0]) {
					settings.url = $urlElement.data('src') || $urlElement.attr('src');
				}
				if (!settings.url) {
					return;
				}
			}

			img.onload = function () {
			    var zoom = $.zoom(target, source, img, settings.magnify, settings.tolerance);

				function start(e) {
					zoom.init();
					zoom.move(e);
					// Skip the fade-in for IE8 and lower since it chokes on fading-in
					// and changing position based on mousemovement at the same time.
					$img.stop()
					.fadeTo($.support.opacity ? settings.duration : 0, 1, $.isFunction(settings.onZoomIn) ? settings.onZoomIn.call(img) : false);
				}

				function stop() {
					$img.stop()
					.fadeTo(settings.duration, 0, $.isFunction(settings.onZoomOut) ? settings.onZoomOut.call(img) : false);
				}

				// Mouse events
				if (settings.on === 'grab') {
					$(source)
						.on('mousedown.zoom',
							function (e) {
								if (e.which === 1) {
									$(document).one('mouseup.zoom',
										function () {
											stop();

											$(document).off(mousemove, zoom.move);
										}
									);

									start(e);

									$(document).on(mousemove, zoom.move);

									e.preventDefault();
								}
							}
						);
				} else if (settings.on === 'click') {
					$(source).on('click.zoom',
						function (e) {
							if (clicked) {
								// bubble the event up to the document to trigger the unbind.
								return;
							} else {
								clicked = true;
								start(e);
								$(document).on(mousemove, zoom.move);
								$(document).one('click.zoom',
									function () {
										stop();
										clicked = false;
										$(document).off(mousemove, zoom.move);
									}
								);
								return false;
							}
						}
					);
				} else if (settings.on === 'toggle') {
					$(source).on('click.zoom',
						function (e) {
							if (clicked) {
								stop();
							} else {
								start(e);
							}
							clicked = !clicked;
						}
					);
				} else if (settings.on === 'mouseover') {
					zoom.init(); // Preemptively call init because IE7 will fire the mousemove handler before the hover handler.

					$(source)
						.on('mouseenter.zoom', start)
						.on('mouseleave.zoom', stop)
						.on(mousemove, zoom.move);

					// $(target)
					// 	.on(mousemove, zoom.move);
				}

				// Touch fallback
				if (settings.touch) {
					$(source)
						.on('touchstart.zoom', function (e) { 
							e.preventDefault();
							if (touched) {
								touched = false;
								stop();
							} else {
								touched = true;
								start( e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] );
							}
						})
						.on('touchmove.zoom', function (e) { 
							e.preventDefault();
							zoom.move( e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] );
						});
				}
				
				if ($.isFunction(settings.callback)) {
					settings.callback.call(img);
				}
			};

			img.src = settings.url;

			$(source).one('zoom.destroy', function(){
				$(source).off(".zoom");
				$img.remove();
			});
		});
	};

	$.fn.zoom.defaults = defaults;
}(window.jQuery));